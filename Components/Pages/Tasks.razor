@page "/tasks"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using TaskManager.Data
@using TaskManager.Models
@inject ApplicationDbContext Context
@inject UserManager<IdentityUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<PageTitle>My Tasks</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-md-12">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h1 class="h3">My Tasks</h1>
                <a href="/tasks/create" class="btn btn-primary">
                    <i class="fas fa-plus"></i> Add New Task
                </a>
            </div>

            @if (tasks?.Any() == true)
            {
                <div class="row">
                    <div class="col-md-12">
                        <div class="card">
                            <div class="card-body">
                                <div class="table-responsive">
                                    <table class="table table-striped table-hover">
                                        <thead class="table-dark">
                                            <tr>
                                                <th>Title</th>
                                                <th>Due Date</th>
                                                <th>Priority</th>
                                                <th>Status</th>
                                                <th>Assigned To</th>
                                                <th>Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var task in tasks)
                                            {
                                                <tr class="@GetRowClass(task)">
                                                    <td>
                                                        <strong>@task.Title</strong>
                                                        @if (!string.IsNullOrEmpty(task.Description))
                                                        {
                                                            <br />
                                                            <small class="text-muted">@task.Description</small>
                                                        }
                                                    </td>
                                                    <td>
                                                        <span class="@GetDueDateClass(task)">
                                                            @task.DueDate.ToString("MMM dd, yyyy")
                                                        </span>
                                                    </td>
                                                    <td>
                                                        <span class="badge @GetPriorityClass(task.Priority)">
                                                            @task.Priority
                                                        </span>
                                                    </td>
                                                    <td>
                                                        <span class="badge @GetStatusClass(task.Status)">
                                                            @task.Status
                                                        </span>
                                                    </td>
                                                    <td>@task.AssignedToUser?.UserName</td>
                                                    <td>
                                                        <div class="btn-group btn-group-sm" role="group">
                                                            <a href="/tasks/details/@task.Id" class="btn btn-outline-info">
                                                                <i class="fas fa-eye"></i> View
                                                            </a>
                                                            <a href="/tasks/edit/@task.Id" class="btn btn-outline-primary">
                                                                <i class="fas fa-edit"></i> Edit
                                                            </a>
                                                            @if (task.Status != TaskManager.Models.TaskStatus.Completed)
                                                            {
                                                                <button type="button" class="btn btn-outline-success" @onclick="() => CompleteTask(task.Id)">
                                                                    <i class="fas fa-check"></i> Complete
                                                                </button>
                                                            }
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <i class="fas fa-tasks fa-3x text-muted mb-3"></i>
                    <h4 class="text-muted">No tasks found</h4>
                    <p class="text-muted">Get started by creating your first task!</p>
                    <a href="/tasks/create" class="btn btn-primary">
                        <i class="fas fa-plus"></i> Create Task
                    </a>
                </div>
            }
        </div>
    </div>
</div>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />

@code {
    private List<TaskItem>? tasks;
    private string? currentUserId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            currentUserId = UserManager.GetUserId(authState.User);
            await LoadTasks();
        }
    }

    private async Task LoadTasks()
    {
        if (currentUserId != null)
        {
            tasks = await Context.Tasks
                .Include(t => t.AssignedToUser)
                .Include(t => t.CreatedByUser)
                .Where(t => t.AssignedToUserId == currentUserId)
                .OrderBy(t => t.DueDate)
                .ToListAsync();
        }
    }

    private async Task CompleteTask(int taskId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Mark this task as completed?");
        if (!confirmed) return;

        var task = await Context.Tasks
            .FirstOrDefaultAsync(t => t.Id == taskId && t.AssignedToUserId == currentUserId);

        if (task != null)
        {
            task.Status = TaskManager.Models.TaskStatus.Completed;
            task.CompletedAt = DateTime.UtcNow;

            await Context.SaveChangesAsync();
            await LoadTasks();
            StateHasChanged();
        }
    }

    private string GetRowClass(TaskItem task)
    {
        if (task.Status == TaskManager.Models.TaskStatus.Completed) return "table-success";
        if (task.DueDate < DateTime.Now && task.Status != TaskManager.Models.TaskStatus.Completed) return "table-danger";
        return "";
    }

    private string GetDueDateClass(TaskItem task)
    {
        if (task.DueDate < DateTime.Now && task.Status != TaskManager.Models.TaskStatus.Completed)
            return "text-danger fw-bold";
        if (task.DueDate < DateTime.Now.AddDays(3))
            return "text-warning";
        return "";
    }

    private string GetPriorityClass(TaskPriority priority)
    {
        return priority switch
        {
            TaskPriority.Critical => "bg-danger",
            TaskPriority.High => "bg-warning text-dark",
            TaskPriority.Medium => "bg-info",
            TaskPriority.Low => "bg-secondary",
            _ => "bg-secondary"
        };
    }

    private string GetStatusClass(TaskManager.Models.TaskStatus status)
    {
        return status switch
        {
            TaskManager.Models.TaskStatus.Pending => "bg-secondary",
            TaskManager.Models.TaskStatus.InProgress => "bg-primary",
            TaskManager.Models.TaskStatus.Completed => "bg-success",
            TaskManager.Models.TaskStatus.Cancelled => "bg-dark",
            _ => "bg-secondary"
        };
    }
}