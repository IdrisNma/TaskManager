@page "/tasks/edit/{id:int}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using TaskManager.Data
@using TaskManager.Models
@inject ApplicationDbContext Context
@inject UserManager<IdentityUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<PageTitle>Edit Task</PageTitle>

@if (taskItem == null)
{
    <div class="container">
        <div class="alert alert-warning">
            <h4>Task not found</h4>
            <p>The requested task could not be found.</p>
            <a href="/tasks" class="btn btn-primary">Back to Tasks</a>
        </div>
    </div>
}
else
{
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title mb-0">Edit Task</h3>
                    </div>
                    <div class="card-body">
                        <EditForm Model="@taskItem" OnValidSubmit="@HandleValidSubmit">
                            <DataAnnotationsValidator />
                            
                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <div class="alert alert-danger mb-3">@errorMessage</div>
                            }
                            
                            <div class="mb-3">
                                <label for="title" class="form-label">Title</label>
                                <InputText id="title" @bind-Value="taskItem.Title" class="form-control" />
                                <ValidationMessage For="@(() => taskItem.Title)" class="text-danger" />
                            </div>
                            
                            <div class="mb-3">
                                <label for="description" class="form-label">Description</label>
                                <InputTextArea id="description" @bind-Value="taskItem.Description" class="form-control" rows="3" />
                                <ValidationMessage For="@(() => taskItem.Description)" class="text-danger" />
                            </div>
                            
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="dueDate" class="form-label">Due Date</label>
                                        <InputDate id="dueDate" @bind-Value="taskItem.DueDate" class="form-control" />
                                        <ValidationMessage For="@(() => taskItem.DueDate)" class="text-danger" />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="priority" class="form-label">Priority</label>
                                        <InputSelect id="priority" @bind-Value="taskItem.Priority" class="form-select">
                                            @foreach (TaskPriority priority in Enum.GetValues<TaskPriority>())
                                            {
                                                <option value="@priority">@priority</option>
                                            }
                                        </InputSelect>
                                        <ValidationMessage For="@(() => taskItem.Priority)" class="text-danger" />
                                    </div>
                                </div>
                            </div>
                            
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="status" class="form-label">Status</label>
                                        <InputSelect id="status" @bind-Value="taskItem.Status" class="form-select">
                                            @foreach (TaskManager.Models.TaskStatus status in Enum.GetValues<TaskManager.Models.TaskStatus>())
                                            {
                                                <option value="@status">@status</option>
                                            }
                                        </InputSelect>
                                        <ValidationMessage For="@(() => taskItem.Status)" class="text-danger" />
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label for="assignedTo" class="form-label">Assign To</label>
                                        <InputSelect id="assignedTo" @bind-Value="taskItem.AssignedToUserId" class="form-select">
                                            @if (users != null)
                                            {
                                                @foreach (var user in users)
                                                {
                                                    <option value="@user.Id">@user.Email</option>
                                                }
                                            }
                                        </InputSelect>
                                        <ValidationMessage For="@(() => taskItem.AssignedToUserId)" class="text-danger" />
                                    </div>
                                </div>
                            </div>
                            
                            <div class="mb-3">
                                <label for="notes" class="form-label">Notes</label>
                                <InputTextArea id="notes" @bind-Value="taskItem.Notes" class="form-control" rows="2" />
                                <ValidationMessage For="@(() => taskItem.Notes)" class="text-danger" />
                            </div>
                            
                            <div class="d-flex justify-content-between">
                                <div>
                                    <a href="/tasks" class="btn btn-secondary">
                                        <i class="fas fa-arrow-left"></i> Back to List
                                    </a>
                                    <a href="/tasks/details/@taskItem.Id" class="btn btn-outline-info">
                                        <i class="fas fa-eye"></i> View Details
                                    </a>
                                </div>
                                <div>
                                    <button type="button" class="btn btn-outline-danger me-2" @onclick="DeleteTask" disabled="@isSubmitting">
                                        <i class="fas fa-trash"></i> Delete
                                    </button>
                                    <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                                        @if (isSubmitting)
                                        {
                                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                            <span> Saving...</span>
                                        }
                                        else
                                        {
                                            <i class="fas fa-save"></i> <span> Save Changes</span>
                                        }
                                    </button>
                                </div>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />

@code {
    [Parameter] public int Id { get; set; }
    
    private TaskItem? taskItem;
    private List<IdentityUser>? users;
    private string? errorMessage;
    private bool isSubmitting = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadTask();
        await LoadUsers();
    }

    private async Task LoadTask()
    {
        taskItem = await Context.Tasks
            .Include(t => t.AssignedToUser)
            .Include(t => t.CreatedByUser)
            .FirstOrDefaultAsync(m => m.Id == Id);
    }

    private async Task LoadUsers()
    {
        users = await UserManager.Users.ToListAsync();
    }

    private async Task HandleValidSubmit()
    {
        if (taskItem == null) return;
        
        isSubmitting = true;
        errorMessage = string.Empty;
        
        try
        {
            // Update completion timestamp if status changed to completed
            if (taskItem.Status == TaskManager.Models.TaskStatus.Completed && taskItem.CompletedAt == null)
            {
                taskItem.CompletedAt = DateTime.UtcNow;
            }
            else if (taskItem.Status != TaskManager.Models.TaskStatus.Completed)
            {
                taskItem.CompletedAt = null;
            }

            Context.Attach(taskItem).State = EntityState.Modified;
            await Context.SaveChangesAsync();

            Navigation.NavigateTo("/tasks");
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!TaskItemExists(taskItem.Id))
            {
                errorMessage = "This task no longer exists.";
            }
            else
            {
                errorMessage = "An error occurred while saving. The task may have been modified by another user.";
            }
        }
        catch (Exception)
        {
            errorMessage = "An error occurred while saving the task. Please try again.";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task DeleteTask()
    {
        if (taskItem == null) return;
        
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this task? This action cannot be undone.");
        if (!confirmed) return;

        try
        {
            Context.Tasks.Remove(taskItem);
            await Context.SaveChangesAsync();
            Navigation.NavigateTo("/tasks");
        }
        catch (Exception)
        {
            errorMessage = "An error occurred while deleting the task. Please try again.";
        }
    }

    private bool TaskItemExists(int id)
    {
        return Context.Tasks.Any(e => e.Id == id);
    }
}